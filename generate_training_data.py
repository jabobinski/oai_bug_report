import json
import os
from openai import OpenAI
import random
import time

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("OPENAI_API_KEY is not set")

client = OpenAI(api_key=api_key)

bug_descriptions = [
    "App crashes when tapping the profile picture",
    "Button 'Submit' does not respond on iOS",
    "App loads forever on login with poor internet",
    "Notification sound doesn't play on Android 14",
    "Text input freezes after typing special characters",
    "Dark mode theme resets after restart",
    "Search results show outdated items",
    "Camera permission prompt doesn't appear",
    "Push notifications don't open the app",
    "Scrolling lags when keyboard is open"
]

segments = {
    "Verification Builds": "Describe the environment and versions used for testing. Max 20 words.",
    "Summary": "Provide ONLY a short summary (max 10 words) of the bug.",
    "Repro Steps": "Return ONLY a list of step-by-step instructions to reproduce the bug.",
    "Observed Results": "Describe what actually happens when the bug occurs. Max 25 words.",
    "Expected Results": "Explain what should happen and what is expected. Max 25 words."
}

training_examples = []

for desc in bug_descriptions:
    for seg, prompt_text in segments.items():
        full_prompt = f"{prompt_text}\n\nFull Bug Description:\n{desc}"
        
        try:
            completion = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant for generating bug ticket segments."},
                    {"role": "user", "content": full_prompt}
                ],
                temperature=0.4,
                max_tokens=150
            )

            response = completion.choices[0].message.content.strip()
            training_examples.append({
                "segment": seg,
                "full_description": desc,
                "response": response
            })

            print(f"Generated for segment '{seg}' on: {desc}")
            time.sleep(1)

        except Exception as e:
            print(f"Error generating for {seg} - {desc}: {e}")

with open("autogenerated_training_data.jsonl", "w", encoding="utf-8") as f:
    for item in training_examples:
        messages = [
            {"role": "system", "content": "You are a helpful assistant for generating bug tickets."},
            {"role": "user", "content": f"{item['segment']}:\n\nFull Bug Description: {item['full_description']}"},
            {"role": "assistant", "content": item["response"]}
        ]
        json.dump({"messages": messages}, f)
        f.write("\n")

print(f"\nSaved {len(training_examples)} training examples to 'autogenerated_training_data.jsonl'")
